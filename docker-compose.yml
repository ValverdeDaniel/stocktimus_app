# Filename: docker-compose.yml

version: '3.8'

services:
  # 1. PostgreSQL Database Service
  db:
    image: postgres:15
    container_name: stocktimus_db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    # Environment variables for the database
    environment:
      - POSTGRES_DB=options_db
      - POSTGRES_USER=options_user
      - POSTGRES_PASSWORD=secret123
    ports:
      # Exposes the database on port 5432 so you can connect with a DB tool if needed
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U options_user -d options_db"]
      interval: 5s
      timeout: 5s
      retries: 5


  # 2. Django Backend Service
  backend:
    build: . # Tells Docker to look for a Dockerfile in the 'stocktimus' folder
    container_name: stocktimus_backend
    volumes:
      # Mounts your local code into the container for instant changes
      - .:/app
    ports:
      - "8000:8000"
    environment:
      # Tells Django how to connect to the database
      - ENVIRONMENT=local
      - DB_NAME=options_db
      - DB_USER=options_user
      - DB_PASSWORD=secret123
      - DB_HOST=db
      - DB_PORT=5432
      - DJANGO_DEBUG=True
    # Ensures the database starts before the backend
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped


  # 3. Node.js Frontend Service (Placeholder)
  frontend:
    build: 
      context: ./frontend # Assumes you will have a 'frontend' folder with a Dockerfile
      args:
        - ENVIRONMENT=local
        - REACT_APP_API_URL=http://backend:8000
    container_name: stocktimus_frontend
    environment:
      - ENVIRONMENT=local
      - REACT_APP_API_URL=http://backend:8000
    volumes:
      - ./frontend:/app
      - /app/node_modules # Prevents local node_modules from overwriting container's
    ports:
      - "3000:3000"
    depends_on:
      - backend

volumes:
  # This creates a persistent volume for your database data
  postgres_data: